diff --git a/js/browser/UIComponent.js b/js/browser/UIComponent.js
index d2341ae..3220eb4 100644
--- a/js/browser/UIComponent.js
+++ b/js/browser/UIComponent.js
@@ -32,3 +32,14 @@ exports = Class(common.Publisher, function(supr) {
 	this.appendTo = function(element) { element.appendChild(this.getElement()); }
 	this.prependTo = function(element) { element.insertBefore(this.getElement(), element.firstChild); }
 })
+
+exports.DimensionCache = {
+	getDimensions: function() {
+		if (this._dimensionCache) { return shallowCopy(this._dimensionCache); }
+		return this._dimensionCache = browser.dimensions.getDimensions(this.getElement());
+	},
+	
+	invalidateDimensionCache: function() {
+		delete this._dimensionCache;
+	}
+}
\ No newline at end of file
diff --git a/js/common/javascript.js b/js/common/javascript.js
index 86312ba..48c3e15 100755
--- a/js/common/javascript.js
+++ b/js/common/javascript.js
@@ -7,6 +7,17 @@ exports.bind = function(context, method/*, args... */) {
 	}
 }
 
+exports.shallowCopy = function(obj) {
+	var newbObj = {};
+	for (var key in obj) { newbObj[key] = obj[key]; }
+	return newbObj;
+}
+
 exports.forEach = function(items, fn) {
 	for (var i=0, item; item = items[i]; i++) { fn(item) }
 }
@@ -17,20 +28,26 @@ exports.map = function(items, fn) {
 	return results;
 }
 
-exports.Class = function(parent, proto) {
-	if(!proto) { proto = parent; }
-	proto.prototype = parent.prototype;
+exports.Class = function(optParent, optBehaviors, proto) {
+	if (!proto) { proto = optBehaviors; }
+	if (!proto) { proto = optParent; }
+
+	proto.prototype = optParent.prototype;
 	
 	var cls = function() { if(this.init) { this.init.apply(this, arguments); }}
-	cls.prototype = new proto(function(context, method, args) {
-		var target = parent;
+	var supr = function(context, method, args) {
+		var target = optParent;
 		while(target = target.prototype) {
 			if(target[method]) {
 				return target[method].apply(context, args || []);
 			}
 		}
 		throw new Error('supr: parent method ' + method + ' does not exist');
-	});
+	}
+	cls.prototype = new proto(supr);
+	for (var key in optBehaviors) {
+		cls.prototype[key] = optBehaviors[key];
+	}
 	cls.prototype.constructor = cls;
 	return cls;
 }
